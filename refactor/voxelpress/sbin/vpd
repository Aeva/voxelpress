#!/usr/bin/env python

# This file is part of VoxelPress.
#
# VoxelPress is free software: you can redistribute it and/or modify it
# under the terms of the GNU General Public License as published by
# the Free Software Foundation, either version 3 of the License, or
# (at your option) any later version.
#
# VoxelPress is distributed in the hope that it will be useful, but
# WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
# General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with VoxelPress.  If not, see <http://www.gnu.org/licenses/>.
#
# Have a nice day!


import os
import sys
sys.path.insert(1, os.path.abspath(os.path.join(sys.argv[0], "../../lib/voxelpress")))

import glob
import uuid
import json
import daemon
import gobject
import dbus, dbus.service
from dbus.mainloop.glib import DBusGMainLoop

try:
    from udev import HardwareMonitor
except ImportError:
    raise

from printer_kind import VoxelpressPrinter




class VoxelpressServer(dbus.service.Object):

    def __init__(self):
        namespace = "org.voxelpress"
        bus_name = dbus.service.BusName(namespace, bus=dbus.SessionBus())
        dbus.service.Object.__init__(self, bus_name, "/" + namespace.replace(".", "/"))
        self.devices = {} # is this still needed?
        self.printers = {}

        # load saved printer configs
        self.__config_path = os.path.abspath(
            os.path.join(sys.argv[0], "../../etc/voxelpress/printers/"))
        found = glob.glob(os.path.join(self.__config_path, "*.json"))
        for path in found:
            puuid = uuid.UUID(os.path.split(path)[1][:-5])
            self.printers[puuid] = VoxelpressPrinter(puuid)


    @dbus.service.method("org.voxelpress.events", in_signature='s')
    def on_connect(self, device_info):
        config = json.loads(device_info)
        printer_uuid = uuid.UUID(config["uuid"])
        usb_path = config["usb_path"]
        if not self.devices.has_key(usb_path):
            self.devices[usb_path] = printer_uuid
            if not self.printers.has_key(printer_uuid):
                self.printers[printer_uuid] = VoxelpressPrinter(printer_uuid)
            self.printers[printer_uuid].on_connect(config)
        else:
            raise RuntimeError("FIXME: This should never happen.")
            

    @dbus.service.method("org.voxelpress.events", in_signature='s')
    def on_disconnect(self, usb_path):
        if self.devices.has_key(usb_path):
            printer_uuid = self.devices[usb_path]
            del self.devices[usb_path]
            self.printers[printer_uuid].on_disconnect()




if __name__ == "__main__":
    main_loop = gobject.MainLoop()
    DBusGMainLoop(set_as_default=True)
    voxelpress = VoxelpressServer()
    hardware = HardwareMonitor()
    import pdb; pdb.set_trace()
    main_loop.run()


